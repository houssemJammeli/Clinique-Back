// <auto-generated />
using System;
using CliniqueApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CliniqueApp.Migrations
{
    [DbContext(typeof(CliniqueDbContext))]
    partial class CliniqueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CliniqueApp.Models.Clinique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Cliniques");
                });

            modelBuilder.Entity("CliniqueApp.Models.Consultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MedecinId")
                        .HasColumnType("int");

                    b.Property<string>("Rapport")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RendezVousId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedecinId");

                    b.HasIndex("RendezVousId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("CliniqueApp.Models.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StatutPaiement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId")
                        .IsUnique();

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("CliniqueApp.Models.Ordonnance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId")
                        .IsUnique();

                    b.ToTable("Ordonnances");
                });

            modelBuilder.Entity("CliniqueApp.Models.Paiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FactureId")
                        .IsUnique();

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("CliniqueApp.Models.RendezVous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateHeure")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MedecinId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionnisteId")
                        .HasColumnType("int");

                    b.Property<int?>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedecinId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionnisteId");

                    b.ToTable("RendezVous");
                });

            modelBuilder.Entity("CliniqueApp.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");

                    b.HasDiscriminator().HasValue("Utilisateur");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CliniqueApp.Models.Admin", b =>
                {
                    b.HasBaseType("CliniqueApp.Models.Utilisateur");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("CliniqueApp.Models.Medecin", b =>
                {
                    b.HasBaseType("CliniqueApp.Models.Utilisateur");

                    b.Property<int?>("CliniqueId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salaire")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Specialite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("CliniqueId");

                    b.ToTable("Utilisateurs", t =>
                        {
                            t.Property("CliniqueId")
                                .HasColumnName("Medecin_CliniqueId");

                            t.Property("Salaire")
                                .HasColumnName("Medecin_Salaire");
                        });

                    b.HasDiscriminator().HasValue("Medecin");
                });

            modelBuilder.Entity("CliniqueApp.Models.Patient", b =>
                {
                    b.HasBaseType("CliniqueApp.Models.Utilisateur");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("CliniqueApp.Models.Receptionniste", b =>
                {
                    b.HasBaseType("CliniqueApp.Models.Utilisateur");

                    b.Property<int?>("CliniqueId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salaire")
                        .HasColumnType("decimal(65,30)");

                    b.HasIndex("CliniqueId");

                    b.HasDiscriminator().HasValue("Receptionniste");
                });

            modelBuilder.Entity("CliniqueApp.Models.Clinique", b =>
                {
                    b.HasOne("CliniqueApp.Models.Admin", "Admin")
                        .WithMany("Cliniques")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("CliniqueApp.Models.Consultation", b =>
                {
                    b.HasOne("CliniqueApp.Models.Medecin", "Medecin")
                        .WithMany("Consultations")
                        .HasForeignKey("MedecinId");

                    b.HasOne("CliniqueApp.Models.RendezVous", "RendezVous")
                        .WithMany()
                        .HasForeignKey("RendezVousId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medecin");

                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("CliniqueApp.Models.Facture", b =>
                {
                    b.HasOne("CliniqueApp.Models.Consultation", "Consultation")
                        .WithOne("Facture")
                        .HasForeignKey("CliniqueApp.Models.Facture", "ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("CliniqueApp.Models.Ordonnance", b =>
                {
                    b.HasOne("CliniqueApp.Models.Consultation", "Consultation")
                        .WithOne("Ordonnance")
                        .HasForeignKey("CliniqueApp.Models.Ordonnance", "ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("CliniqueApp.Models.Paiement", b =>
                {
                    b.HasOne("CliniqueApp.Models.Facture", "Facture")
                        .WithOne("Paiement")
                        .HasForeignKey("CliniqueApp.Models.Paiement", "FactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facture");
                });

            modelBuilder.Entity("CliniqueApp.Models.RendezVous", b =>
                {
                    b.HasOne("CliniqueApp.Models.Medecin", "Medecin")
                        .WithMany()
                        .HasForeignKey("MedecinId");

                    b.HasOne("CliniqueApp.Models.Patient", "Patient")
                        .WithMany("RendezVous")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CliniqueApp.Models.Receptionniste", "Receptionniste")
                        .WithMany("RendezVous")
                        .HasForeignKey("ReceptionnisteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medecin");

                    b.Navigation("Patient");

                    b.Navigation("Receptionniste");
                });

            modelBuilder.Entity("CliniqueApp.Models.Medecin", b =>
                {
                    b.HasOne("CliniqueApp.Models.Clinique", "Clinique")
                        .WithMany("Medecins")
                        .HasForeignKey("CliniqueId");

                    b.Navigation("Clinique");
                });

            modelBuilder.Entity("CliniqueApp.Models.Receptionniste", b =>
                {
                    b.HasOne("CliniqueApp.Models.Clinique", "Clinique")
                        .WithMany("Receptionnistes")
                        .HasForeignKey("CliniqueId");

                    b.Navigation("Clinique");
                });

            modelBuilder.Entity("CliniqueApp.Models.Clinique", b =>
                {
                    b.Navigation("Medecins");

                    b.Navigation("Receptionnistes");
                });

            modelBuilder.Entity("CliniqueApp.Models.Consultation", b =>
                {
                    b.Navigation("Facture");

                    b.Navigation("Ordonnance");
                });

            modelBuilder.Entity("CliniqueApp.Models.Facture", b =>
                {
                    b.Navigation("Paiement");
                });

            modelBuilder.Entity("CliniqueApp.Models.Admin", b =>
                {
                    b.Navigation("Cliniques");
                });

            modelBuilder.Entity("CliniqueApp.Models.Medecin", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("CliniqueApp.Models.Patient", b =>
                {
                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("CliniqueApp.Models.Receptionniste", b =>
                {
                    b.Navigation("RendezVous");
                });
#pragma warning restore 612, 618
        }
    }
}
